* Structurally Typed interface description Language

An interface description language based on higher-rank, row-type
polymorphic structural type system.

A few examples:

#+BEGIN_SRC stl
  -- Records:
  type Color =
    { r : Int    -- `Int`, `Float`, and `String` are base types.
    , g : Int
    , b : Int
    }

  -- Variants with no payload (enums):
  type Font =
    | SansSerif
    | Serif
    | Monospaced

  -- Variants with payloads (and recursion):
  type Drawing =
    | Circle    : { radius : Float, color : Color }
    | Square    : { side : Float, color : Color }
    | Label     : { caption : String, font : Font, color : Color }
    | Scale     : { x : Float, y : Float, drawing : Drawing }
    | Rotate    : { radians : Float, drawing : Drawing }
    | Translate : { x : Float, y : Float, drawing : Drawing }
    | Compose   : { background : Drawing, foreground : Drawing }

  -- API as a record of functions:
  type DrawingAPI =
    { canvasSize  : Drawing -> { width : Float, height : Float }
    , toGrayscale : Drawing -> Drawing
    , merge       : List Drawing -> Drawing
    }

  -- Parametric polymorphism:
  type Maybe a =
    | Nothing
    | Just : a

  -- Recursive data type with a parameter:
  type ConsList a =
    | Nil
    | Cons : { head : a, tail : ConsList } -- Don't need
      --   to specify parameters on recursive reference.

  -- Mutually recursive types:
  type Even =
    | EZero
    | ESucc : Odd
  with Odd  =
    | OZero
    | OSucc : Even

  -- Higher kinded types:
  type Fix (f : Type -> Type) = f Fix
  type ConsListF a b =
    | Nil
    | Cons : { head : a, tail : b }

  -- Functor composition:
  type PairHT a b = {head : a, tail : b}
  type SumNC a b = | Nil : a | Cons : b
  type Compose
         (f : Type -> Type)
         (g : Type -> Type)
         (a : Type) = f (g a)
  type AltConsListF a b = Compose (SumNC Unit) (PairHT a) b

  -- ConsList is equivalent to fixed functor composition:
  #check ConsList <: Fix AltConsListF
  #check Fix AltConsListF <: ConsList
#+END_SRC

** Key features

- Structural types: names of the types do not matters; only the
  structure matters. Easier refactoring, no module "owns" a type.
- Order of record fields or variant alternatives does not matter: e.g.
  ~{foo : Int, bar : Bool}~ *is* equivalent to ~{bar : Bool, foo :
  Int}~; but the field names matter: ~{bar : Int}~ *is not* equivalent
  to ~{baz : Int}~.
- Schema evolution is based on subtyping: if a new version of the type
  is a subtype of the old version, the change is not breaking; if it
  is not, then the change *is* breaking. This is easy to check in your
  VCS commit hook, in a test suite.
- If a schema of a service is a subtype of a schema of a client, then
  the service and the client are compatible in the API. This is easy
  to check on handshake instead of checking programmer-assigned
  versions.
- Underlying type system supports parametrised types, recursive types,
  and polymorphic function types, so the API can be modelled using
  very natural and high-level constructs; during the boilerplate
  generation most of these high-level constructs can be compiled away.

** What is missing for the first cut prototype

- [ ] A proper name for the language.
- [ ] Comprehensible error messages from the subsumption
  checker. They're too technical and too verbose at the moment.
- [ ] Module system with exports, imports, etc.
- [ ] User-defined foreign types.
- [X] Bindings generator (for Haskell at least).
- [X] Type term serialisation.
- [ ] Type term serialistion with sharing.
- [X] Run-time subsumption checker and type negotiation machinery.
