#+TITLE: Row-type polymorphism + Interface description languages

Attempt to apply a type system with row-type polymorphic records and
variants to the domain of interface description languages.

- [[http://homepages.inf.ed.ac.uk/slindley/papers/corelinks.pdf][Row-based Effect Types for Database Integration (Lindley, Cheney)]]
- [[https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/scopedlabels.pdf][Extensible records with scoped labels (Leijen)]]

Motivating features:

1. Structural typing better suits the needs of communication between
   systems and serialisation/deserialisation than nominal typing.
   - Names of types don't matter, only their structure matters.
   - Field order doesn't matter either.
2. Subtyping relation on types matches the compatibility property:
   - Values serialised as ~X~ can be deserialised as ~Y~ iff ~X <: Y~.
   - The service is compatible with the client iff ~TypeOfService <: TypeOfClient~.
   - Schema evolution is non-breaking iff ~TypeOfVersionₙ₊₁ <: TypeOfVersionₙ~.

The language supports a set of base types, including arrow type for
functions.
#+BEGIN_SRC stl
  type Flag = Bool
  type Count = Int
  type Length = Float
  type Name = String
  type GetWordCount = String -> Count

  #check Int <: Int     -- OK, trivial
  #check Name <: String -- OK, names don't matter
  #check String <: Name -- OK
  #check Float <: Int   -- Not OK, different types
  #check Int <: Float   -- Not OK
#+END_SRC

Records with required and optional fields.
#+BEGIN_SRC stl
  type Color =
    { red    : Float
    , green  : Float
    , blue   : Float
    , alpha ?: Float -- optional field
    }

  type ColorNoAlpha =
    { red    : Float
    , green  : Float
    , blue   : Float
    }

  #check Color <: ColorNoAlpha  -- OK, field addition
  #check ColorNoAlpha <: Color  -- OK, since `alpha` is optional
  #check {red : Float} <: Color -- Not OK, `green` and `blue` are missing
#+END_SRC

Variants with no payload, also know as enums.
#+BEGIN_SRC stl
  type Font =
    | SansSerif
    | Serif
    | Monospaced

  type FontAlt = ⟨SansSerif | Serif | Monospaced⟩ -- the same as `Font`

  type RichFont =
    | SansSerif
    | Serif
    | Monospaced
    | Cursive

  #check Font <: RichFont  -- OK, alternative restriction
  #check RichFont <: Font  -- Not OK, the client won't be able to handle `Cursive`
#+END_SRC

Variants with payloads. Any types can be payloads, including other
variants and records.
#+BEGIN_SRC stl
  type SimpleDrawing =
    | Dot       : Color                             -- variant payload
    | Circle    : { radius : Float, color : Color } -- record payload
    | Square    : { side : Float, color : Color }
    | Label     : { caption : String, font : Font, color : Color }
#+END_SRC

Recursive types.
#+BEGIN_SRC stl
  type Drawing =
    | Element   : SimpleDrawing
    | Scale     : { x : Float, y : Float, drawing : Drawing }
    | Rotate    : { radians : Float, drawing : Drawing }
    | Translate : { x : Float, y : Float, drawing : Drawing }
    | Compose   : { background : Drawing, foreground : Drawing }
#+END_SRC

Types can be parameterised by other types.
#+BEGIN_SRC stl
  type Maybe a =      -- `a` is a parameter of kind `Type`
    | Nothing
    | Just : a

  #check Maybe Int <: ⟨Nothing | Just : Int⟩  -- OK
  #check ⟨Nothing | Just : Int⟩ <: Maybe Int  -- OK
#+END_SRC

API can be represented as a record of functions.
#+BEGIN_SRC stl
  type DrawingAPI =
    { canvasSize  : Drawing -> { width : Float, height : Float }
    , toGrayscale : Drawing -> Drawing
    , merge       : List Drawing -> Drawing
    }
#+END_SRC

Arrow type is contravariant in its argument and covariant its result.
#+BEGIN_SRC stl
  type A = ...
  type B = ...
  type C = ...
  type D = ...

  -- If
  #check B <: A
  #check C <: D

  -- Then
  #check A -> C <: B -> D
#+END_SRC
