tests/recursion01.types:3:1-3:12:
  Normalised:
    μ Peano. ∀ (ρ : Row). <Zero? : Unit | Succ? : Peano | … ρ>
  Kind:
    Type
tests/recursion01.types:6:1-6:15:
  Normalised:
    λ a. μ ConsList. ∀ (ρ : Row).
      < Nil? : Unit
      | Cons? : ∃ (ρ : Row). {head : a, tail : ConsList, … ρ}
      | … ρ
      >
  Kind:
    Type → Type
tests/recursion01.types:7:1-7:20:
  Normalised:
    μ ConsList. ∀ (ρ : Row).
      < Nil? : Unit
      | Cons? : ∃ (ρ : Row). {head : Unit, tail : ConsList, … ρ}
      | … ρ
      >
  Kind:
    Type
tests/recursion01.types:8:1-8:21:
  Normalised:
    μ ConsList. ∀ (ρ : Row).
      < Nil? : Unit
      | Cons? :
          ∃ (ρ : Row).
            { head : μ Peano. ∀ (ρ : Row). <Zero? : Unit | Succ? : Peano | … ρ>
            , tail : ConsList
            , … ρ
            }
      | … ρ
      >
  Kind:
    Type
tests/recursion01.types:11:1-11:16:
  Normalised:
    λ a. ∀ (ρ : Row).
      < Nil? : Unit
      | Cons? :
          ∃ (ρ : Row).
            { head : a
            , tail :
                μ ConsList. ∀ (ρ : Row).
                  < Nil? : Unit
                  | Cons? : ∃ (ρ : Row). {head : a, tail : ConsList, … ρ}
                  | … ρ
                  >
            , … ρ
            }
      | … ρ
      >
  Kind:
    Type → Type
tests/recursion01.types:12:1-12:21:
  Normalised:
    ∀ (ρ : Row).
      < Nil? : Unit
      | Cons? :
          ∃ (ρ : Row).
            { head : Unit
            , tail :
                μ ConsList. ∀ (ρ : Row).
                  < Nil? : Unit
                  | Cons? : ∃ (ρ : Row). {head : Unit, tail : ConsList, … ρ}
                  | … ρ
                  >
            , … ρ
            }
      | … ρ
      >
  Kind:
    Type
tests/recursion01.types:13:1-13:22:
  Normalised:
    ∀ (ρ : Row).
      < Nil? : Unit
      | Cons? :
          ∃ (ρ : Row).
            { head : μ Peano. ∀ (ρ : Row). <Zero? : Unit | Succ? : Peano | … ρ>
            , tail :
                μ ConsList. ∀ (ρ : Row).
                  < Nil? : Unit
                  | Cons? :
                      ∃ (ρ : Row).
                        { head :
                            μ Peano. ∀ (ρ : Row).
                              <Zero? : Unit | Succ? : Peano | … ρ>
                        , tail : ConsList
                        , … ρ
                        }
                  | … ρ
                  >
            , … ρ
            }
      | … ρ
      >
  Kind:
    Type
tests/recursion01.types:15:1-15:39:
  Subtype:
    μ ConsList. ∀ (ρ : Row).
      < Nil? : Unit
      | Cons? : ∃ (ρ : Row). {head : Unit, tail : ConsList, … ρ}
      | … ρ
      >
  Supertype:
    ∀ (ρ : Row).
      < Nil? : Unit
      | Cons? :
          ∃ (ρ : Row).
            { head : Unit
            , tail :
                μ ConsList. ∀ (ρ : Row).
                  < Nil? : Unit
                  | Cons? : ∃ (ρ : Row). {head : Unit, tail : ConsList, … ρ}
                  | … ρ
                  >
            , … ρ
            }
      | … ρ
      >
  Result:
    OK
tests/recursion01.types:16:1-16:39:
  Subtype:
    ∀ (ρ : Row).
      < Nil? : Unit
      | Cons? :
          ∃ (ρ : Row).
            { head : Unit
            , tail :
                μ ConsList. ∀ (ρ : Row).
                  < Nil? : Unit
                  | Cons? : ∃ (ρ : Row). {head : Unit, tail : ConsList, … ρ}
                  | … ρ
                  >
            , … ρ
            }
      | … ρ
      >
  Supertype:
    μ ConsList. ∀ (ρ : Row).
      < Nil? : Unit
      | Cons? : ∃ (ρ : Row). {head : Unit, tail : ConsList, … ρ}
      | … ρ
      >
  Result:
    OK