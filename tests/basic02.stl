type Product = { fst : Unit, snd : Void }
#eval Product

type Sum = < Inl : Unit | Inr : Void >
#eval Sum

type SumOfProducts =
  | Left  : Product
  | Right : Product

#eval SumOfProducts

type ProductOfSumsOptional =
  { first?  : Sum
  , second? : Sum
  }
#eval ProductOfSumsOptional

type ProductOfSums =
  { first  : Sum
  , second : Sum
  }
#eval ProductOfSums

type ProductOfFunctions =
  { choice  : Unit -> Void -> Sum
  , product : Unit -> Void -> Product
  }
#eval ProductOfFunctions
