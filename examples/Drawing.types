-- Records:
type Color =
  { r : Int
  , g : Int
  , b : Int
  }

-- * `Int`, `Float`, and `Text` are base types.

-- Variants with no payload (enums):
type Font =
  | SansSerif
  | Serif
  | Monospaced

-- Variants with payloads (and recursion):
type Drawing =
  | Circle    : { radius : Float, color : Color }
  | Square    : { side : Float, color : Color }
  | Label     : { caption : String, font : Font, color : Color }
  | Scale     : { x : Float, y : Float, drawing : Drawing }
  | Rotate    : { radians : Float, drawing : Drawing }
  | Translate : { x : Float, y : Float, drawing : Drawing }
  | Compose   : { background : Drawing, foreground : Drawing }

type SimpleDrawing =
  | Circle    : { radius : Float, color : Color }
  | Translate : { x : Float, y : Float, drawing : SimpleDrawing }

type CanvasSizeFun = Drawing -> { width : Float, height : Float }
type CanvasSizeSimpleFun = SimpleDrawing -> { width : Float, height : Float }

#check CanvasSizeFun <: CanvasSizeSimpleFun
#check CanvasSizeSimpleFun <: CanvasSizeFun

-- API entry point:
provide
  { canvasSize  : Drawing -> { width : Float, height : Float }
  , toGrayscale : Drawing -> Drawing
  , merge       : List Drawing -> Drawing
  }

-- * `a -> b` is type of functions with argument of type `a` and result of type `b`.
-- * `List` is parametrised type of lists. `List Int` means list of integers.
