
module Foo (f : Type -> Type)

import Bar
import Baz = Quux (f a)

type Maybe a =
  < Nothing
  , Just : a
  >

type Pair a b =
  { fst : a
  , snd : b
  }

type Fun1 =
  forall a b.
    Pair a b -> Pair b a

-- Mutually recursive block with parameter
mutual (a : Type)
  | Odd  = <OZero : a, OSucc : Even>
  | Even = <EZero : a, ESucc : Odd>

#eval
  Unit

#check
  forall a. Maybe a <: Maybe Unit

return
  Maybe (Pair Unit Void)

