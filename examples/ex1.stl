
module Foo

import Bar

type Maybe a =
  | Nothing
  | Just : a

type Pair a b =
  { fst : a
  , snd : b
  }

type Fun1 =
  forall a b.
    Pair a b -> Pair b a

-- Mutually recursive block with parameter
type Odd (a : Type) =
  | OZero : a
  | OSucc : Even
  with Even =
    | EZero : a
    | ESucc : Odd

#eval
  Unit

#check
  forall a. Maybe a <: Maybe Unit

provide
  Maybe (Pair Unit Void)

